name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Lint with flake8
      run: |
        uv run flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        uv run flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        uv run black --check src tests
    
    - name: Import sort check with isort
      run: |
        uv run isort --check-only src tests
    
    - name: Type check with mypy
      run: |
        uv run mypy src
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        uv run pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    
    - name: Install bandit
      run: uv tool install bandit[toml]
    
    - name: Security check with bandit
      run: |
        uv tool run bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.json

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build API Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./docker/Dockerfile.api
        push: false
        tags: bike-sharing-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build training Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./docker/Dockerfile.training
        push: false
        tags: bike-sharing-training:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start services with docker compose
      run: |
        docker compose -f docker-compose.yml up -d --build
        sleep 300  # Wait for services to start
    
    - name: Check service health
      run: |
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:5000/version || exit 1
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Run integration tests
      run: |
        uv run python -m pytest tests/integration/ -v
      env:
        API_BASE_URL: http://localhost:8000
        MLFLOW_TRACKING_URI: http://localhost:5000
    
    - name: Stop services
      run: docker compose down
      if: always()
    
    - name: Collect logs
      run: |
        mkdir -p logs
        docker compose logs > logs/docker-compose.log
      if: failure()
    
    - name: Upload logs
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-logs
        path: logs/
      if: failure()